# Dockerfile.secure - Hardened container image
FROM python:3.11-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    git \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

# Create build user
RUN groupadd -r builder && useradd -r -g builder builder
WORKDIR /build
COPY requirements-secure.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements-secure.txt

# Scan dependencies for vulnerabilities
RUN pip install safety && python -m safety check

FROM python:3.11-slim AS production

# Install runtime dependencies and security tools
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libmagic1 \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user with specific UID/GID
RUN groupadd -r -g 1000 appuser && \
    useradd -r -u 1000 -g appuser -s /sbin/nologin -c "App User" appuser

# Copy dependencies from builder
COPY --from=builder /root/.local /home/appuser/.local

# Create app directory with proper permissions
WORKDIR /app
RUN chown -R appuser:appuser /app

# Copy application files
COPY --chown=appuser:appuser ../app.py app.py
COPY --chown=appuser:appuser ../vcc.py .
COPY --chown=appuser:appuser ../templates/ templates/
COPY --chown=appuser:appuser ../static/ static/

# Set security labels
LABEL security.scan="trivy"
LABEL security.user="nonroot"
LABEL security.capabilities="none"

# Security hardening
RUN chmod -R 400 /app/*.py && \
    chmod -R 444 /app/templates/* /app/static/*

# Switch to non-root user
USER appuser

# Set Python path
ENV PATH=/home/appuser/.local/bin:$PATH
ENV PYTHONPATH=/app

# Health check endpoint
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/health')"

EXPOSE 5000

# Use exec form to prevent shell injection
ENTRYPOINT ["python"]
CMD ["app.py"]