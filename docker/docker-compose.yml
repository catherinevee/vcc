# docker-compose.yml - Production-grade secure deployment
version: '3.8'

services:
  # HashiCorp Vault for secret management
  vault:
    image: hashicorp/vault:1.15
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./vault-config.hcl:/vault/config/vault.hcl
    command: server
    networks:
      - secure_network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Sentinel for HA
  redis-master:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - secure_network
    sysctls:
      - net.core.somaxconn=65535
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-sentinel-1:
    image: redis:7-alpine
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./sentinel.conf:/etc/redis/sentinel.conf
    networks:
      - secure_network
    depends_on:
      - redis-master

  redis-sentinel-2:
    image: redis:7-alpine
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./sentinel.conf:/etc/redis/sentinel.conf
    networks:
      - secure_network
    depends_on:
      - redis-master

  redis-sentinel-3:
    image: redis:7-alpine
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./sentinel.conf:/etc/redis/sentinel.conf
    networks:
      - secure_network
    depends_on:
      - redis-master

  # Main application with security hardening
  web:
    build:
      context: .
      dockerfile: Dockerfile.secure
    ports:
      - "5000:5000"
    environment:
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - VAULT_URL=http://vault:8200
      - VAULT_ROLE_ID=${VAULT_ROLE_ID}
      - VAULT_SECRET_ID=${VAULT_SECRET_ID}
      - USE_VAULT=true
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis-master:6379/2
      - FRONTEND_URL=${FRONTEND_URL:-https://localhost:5000}
      - RP_ID=${RP_ID:-localhost}
      - SIEM_ENDPOINT=${SIEM_ENDPOINT}
      - ENABLE_ZERO_TRUST=true
    depends_on:
      - redis-master
      - vault
    volumes:
      - ./vibe_code_detector.py:/app/vibe_code_detector.py:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For container scanning
    networks:
      - secure_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: gunicorn --worker-class eventlet -w 4 --bind 0.0.0.0:5000 --timeout 30 --max-requests 1000 --max-requests-jitter 50 app:app

  # Celery worker with security restrictions
  worker:
    build:
      context: .
      dockerfile: Dockerfile.secure
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - VAULT_URL=http://vault:8200
      - VAULT_ROLE_ID=${VAULT_ROLE_ID}
      - VAULT_SECRET_ID=${VAULT_SECRET_ID}
      - USE_VAULT=true
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis-master:6379/2
    depends_on:
      - redis-master
      - vault
    volumes:
      - ./vibe_code_detector.py:/app/vibe_code_detector.py:ro
    networks:
      - secure_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    command: celery -A app.celery worker --loglevel=info --concurrency=2 --max-tasks-per-child=100

  # Wazuh SIEM for security monitoring
  wazuh:
    image: wazuh/wazuh-manager:4.7.0
    ports:
      - "1514:1514/udp"
      - "1515:1515"
      - "55000:55000"
    environment:
      - WAZUH_CLUSTER_DISABLED=yes
    volumes:
      - wazuh_data:/var/ossec/data
      - ./wazuh-rules.xml:/var/ossec/etc/rules/local_rules.xml
    networks:
      - secure_network

  # Trivy for container scanning
  trivy:
    image: aquasec/trivy:latest
    command: server --listen 0.0.0.0:8080
    ports:
      - "8080:8080"
    networks:
      - secure_network

networks:
  secure_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
    driver_opts:
      com.docker.network.bridge.enable_icc: "false"  # Disable inter-container communication

volumes:
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  vault_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/vault
  wazuh_data:
    driver: local
